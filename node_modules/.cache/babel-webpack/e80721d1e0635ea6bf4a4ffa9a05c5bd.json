{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport class MenuItem {\n  constructor(id, oldPrice, newPrice, veg, nonVeg, image, offer) {\n    this.id = id;\n    this.oldPrice = oldPrice;\n    this.newPrice = newPrice;\n    this.image = image;\n    this.veg = veg;\n    this.nonVeg = nonVeg;\n    this.offer = offer;\n  }\n\n}\nexport class CartItem {\n  constructor(quantity, productName, id, oldPrice, newPrice, veg, nonVeg, image, offer) {\n    this.id = id;\n    this.oldPrice = oldPrice;\n    this.newPrice = newPrice;\n    this.image = image;\n    this.veg = veg;\n    this.nonVeg = nonVeg;\n    this.offer = offer;\n    this.quantity = quantity;\n    this.productName = productName;\n  }\n\n}\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor( // public storage: NativeStorage,\n    loadingController, alertCtrl) {\n      this.loadingController = loadingController;\n      this.alertCtrl = alertCtrl;\n      this.packingCost = 50;\n      this.deliveryFee = 50;\n      this.tax = '2';\n      this.list = [];\n      this.getvalue();\n    }\n\n    getvalue() {\n      const val = localStorage.getItem('cartItems');\n\n      if (val === null || val === undefined) {\n        this.list = [];\n        return this.list;\n      } else {\n        return this.list = JSON.parse(val);\n      } // this.storage.getItem('cartItems').then((val) => {\n      //   if (val === null || val === undefined) {\n      //     this.list = [];\n      //     return this.list;\n      //   } else {\n      //     return (this.list = val);\n      //   }\n      // });\n\n    }\n\n    getAllCartItems() {\n      return this.list;\n    }\n\n    getItemById(id) {\n      for (let i = 0; i < this.list.length; i++) {\n        if (this.list[i].id === id) {\n          this.changeCart();\n          return this.list[i];\n        }\n      }\n    }\n\n    addItem(quantity, productName, id, oldPrice, newPrice, veg, nonVeg, image, offer) {\n      let isExists = false;\n\n      if (this.list.length) {\n        for (let i = 0; i < this.list.length; i++) {\n          if (this.list[i].id === id) {\n            this.list[i].quantity++;\n            isExists = true;\n            this.changeCart();\n            return true;\n          } else {\n            // if (!isExists) {\n            this.list.push(new CartItem(quantity, productName, id, oldPrice, newPrice, veg, nonVeg, image, offer));\n            this.changeCart();\n            return true; // }\n          }\n        }\n      } else {\n        if (!isExists) {\n          this.list.push(new CartItem(quantity, productName, id, oldPrice, newPrice, veg, nonVeg, image, offer));\n          this.changeCart();\n          return true;\n        }\n      }\n    }\n\n    changeCart() {\n      localStorage.setItem('cartItems', JSON.stringify(this.list)); // this.storage.setItem('cartItems', this.list);\n    }\n\n    addCartItem(item, quantity, items) {\n      this.list.map((cartItem, index) => {\n        if (item.id === cartItem.id) {\n          this.list[index].quantity++;\n        }\n      });\n      this.changeCart();\n    }\n\n    removeItemById(id) {\n      console.log(id);\n\n      for (let i = 0; i < this.list.length; i++) {\n        if (this.list[i].id === id) {\n          this.list.splice(i, 1);\n          this.changeCart();\n          break;\n        }\n      }\n    }\n\n    removeOneItemById(id) {\n      for (let i = 0; i < this.list.length; i++) {\n        if (this.list[i].id === id) {\n          this.list[i].quantity--;\n\n          if (this.list[i].quantity === 0) {\n            this.list.splice(i, 1);\n            this.changeCart();\n            break;\n          }\n\n          this.changeCart();\n          break;\n        }\n      }\n    }\n\n    emptyCart() {\n      // for (let i = 0; i < this.list.length; i++) {\n      //   this.list.splice(i, 1);\n      //   i--;\n      // }\n      this.list = [];\n      localStorage.removeItem('cartItems');\n    }\n\n    quantityPlus(item) {\n      item.quantity += 1;\n    }\n\n    quantityMinus(item) {\n      item.quantity -= 1;\n    }\n\n    getCartLength() {\n      let length = 0;\n      this.list.forEach(element => {\n        length += element.quantity;\n      });\n      return length; // this.cartitems = length\n    }\n\n    getGrandTotal() {\n      let amount = 0;\n\n      for (let i = 0; i < this.list.length; i++) {\n        amount += this.list[i].newPrice * this.list[i].quantity;\n      }\n\n      return amount;\n    }\n\n    alert(condition) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertCtrl.create({\n          header: 'Alert',\n          message: condition,\n          buttons: ['okay']\n        });\n        yield alert.present();\n      });\n    } // Dismiss loader\n\n\n    dismissLoader() {\n      this.loadingController.dismiss().then(response => {\n        console.log('Loader closed!', response);\n      }).catch(err => {\n        console.log('Error occured : ', err);\n      });\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i1.AlertController));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/geolocation/ngx\";\nimport * as i2 from \"@ionic-native/native-geocoder/ngx\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(geolocation, nativeGeocoder) {\n      this.geolocation = geolocation;\n      this.nativeGeocoder = nativeGeocoder;\n      this.address = new BehaviorSubject('');\n    }\n\n    getLocation() {\n      this.geolocation.getCurrentPosition().then(resp => {\n        console.log(resp);\n        this.getAddress(resp.coords.latitude, resp.coords.longitude); // resp.coords.latitude\n        // resp.coords.longitude\n      }).catch(error => {\n        console.log('Error getting location', error);\n      }); //  const watch = this.geolocation.watchPosition();\n      //  watch.subscribe((data) => {\n      //   // data can be a set of coordinates, or an error (if an error occurred).\n      //   // data.coords.latitude\n      //   // data.coords.longitude\n      //  });\n    }\n\n    getAddress(lat, long) {\n      const options = {\n        useLocale: true,\n        maxResults: 5\n      };\n      this.nativeGeocoder.reverseGeocode(lat, long, options).then(result => {\n        console.log(JSON.stringify(result[0]));\n        this.address.next(JSON.stringify(result[0]));\n      }).catch(error => console.log(error));\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.Geolocation), i0.ɵɵinject(i2.NativeGeocoder));\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}